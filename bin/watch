#!/usr/bin/env node

/**
 * Module dependencies.
 */

var exec = require('child_process').exec
var debug = require('debug')('watch')
var program = require('commander')
var path = require('path');
var join = path.join
var Gaze = require('gaze').Gaze
var delay = 0;

var list = function (val) {
  return val.split(',').map(function (val) { 
    return val.trim() 
  })
}

/**
 * Options.
 */

program
  .usage('<cmd>')
  .option('-p, --pattern <pattern>', 'glob pattern. "," separates multiple patterns.\n' +
          '                         More info: https://github.com/isaacs/minimatch' , list, '**')
  .option('-i, --initial', 'run <cmd> on initial startup', false)
  .option('-d, --delay <n>', 'delay execution of <cmd> for a number of milliseconds', parseInt)
  .option('-s, --stop-on-error', 'stop watching and exit when errors occur in <cmd>', false)

/**
 * Examples.
 */

program.on('--help', function(){
  console.log()
  console.log('  Examples:')
  console.log()
  console.log('    # watch dir and execute cmd')
  console.log('    $ watch-run -p \'lib/**\' cat package.json')
  console.log()
  console.log('    # watch dir "lib" and "src" and execute cmd')
  console.log('    $ watch-run -p \'lib/**,src/**\' cat package.json')
  console.log()
})

/**
 * Parse argv.
 */

program.parse(process.argv)

/**
 * Get command.
 */

var command = program.args.join(' ')

/**
 * Watch.
 */

var watch = new Gaze(program.pattern)
watch.on('all', execute)

/**
 * Run initial execution if required.
 */

if (program.initial) {
  execute()
}

/**
 * Set requested delay after initial execution.
 */

delay = program.delay || 0;

/**
 * Execute command when file in dir changes.
 *
 * @param {String} event
 * @param {String} filePath
 */

function execute (event, filePath) {
  setTimeout(function () {
    var relative = path.relative(path.resolve("."), filePath);
    var cmd = command.replace(/{absolute}/g, filePath).replace(/{relative}/g, relative);
    exec(cmd, function(err, stdout, stderr) {
      if(err && program.stopOnErrors) throw err;
      if(stderr) console.log(stderr);
      if(stdout) console.log(stdout);
    })
  }, delay)
}
